---
import { Icon } from "astro-icon/components";
import { createDate, yymmdd } from "..";
import { Image } from "astro:assets";

export interface ExifData {
  DateTimeOriginal: string;
  LensMake: string;
  LensModel: string;
  FocalLength: number;
  ISO: number;
  FNumber: number;
  ExposureTime: number;
  ExposureBiasValue: number;
  GPSLatitudeRef: string;
  GPSLatitude: [number, number, number];
  GPSLongitudeRef: string;
  GPSLongitude: [number, number, number];
  Make: string;
  Model: string;
}

const localize = (s: string) => {
  return s.replace("back dual wide camera", "广角相机");
};

interface Props {
  exif: ExifData;
  image: string;
}

const renderCoordinate = (d: number, m: number, s: number, ref: string) =>
  `${d}°${m}′${Math.round(s)}″${ref}`;

const { exif, image } = Astro.props;
---

<script>
  for (const element of document.getElementsByClassName("modal-toggle")) {
    element.addEventListener("click", () => {
      document.getElementById("image-modal")?.classList.toggle("is-active");
    });
  }
</script>

<section class="section">
  <div class="container is-max-desktop content">
    <Image
      class="modal-toggle"
      inferSize
      src={image}
      alt=""
      aria-haspopup="true"
    />
  </div>
  <div id="image-modal" class={"modal"}>
    <div class="modal-background"></div>
    <div class="modal-content content has-text-centered">
      <Image inferSize src={image} alt="" />
    </div>
    <button class="modal-close is-large modal-toggle" aria-label="close"
    ></button>
  </div>
</section>
<section class="section">
  <div class="container is-max-desktop content">
    <div class="columns">
      <div class="column">
        <p class="is-flex gap-1">
          <Icon name="fa6-solid:calendar" />
          {yymmdd(createDate(exif.DateTimeOriginal))}
        </p>
      </div>
      <div class="column">
        <p class="is-flex gap-1">
          <Icon name="fa6-solid:location-arrow" />
          {renderCoordinate(...exif.GPSLatitude, exif.GPSLatitudeRef)}
          {renderCoordinate(...exif.GPSLongitude, exif.GPSLongitudeRef)}
        </p>
      </div>
    </div>
    <div class="columns">
      <div class="column">
        <p class="is-flex gap-1">
          <Icon name="fa6-solid:camera" />
          {exif.Make}
          {exif.Model}
        </p>
      </div>
      <div class="column">
        <p class="is-flex gap-1">
          <Icon name="fa6-solid:magnifying-glass" />
          {localize(exif.LensModel)}
        </p>
      </div>
      <div class="column">
        <p class="is-flex gap-1">
          <Icon name="fa6-solid:bars" />
          {exif.FocalLength}mm, ƒ/{exif.FNumber}
          {
            exif.ExposureTime >= 1
              ? `${exif.ExposureTime}`
              : `1/${Math.round(1 / exif.ExposureTime)}`
          }
          s, ISO {exif.ISO}
        </p>
      </div>
    </div>
  </div>
</section>
